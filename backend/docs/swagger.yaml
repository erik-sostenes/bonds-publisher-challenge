openapi: 3.0.3
servers:
  - url: "http://localhost:8000"
info:
  title: Bonds Publisher API
  description: REST API that allows users to publish bonds for sale and buy bonds published by other users
  version: 1.0.0
  contact:
    email: eriksostenessimon@gmail.com
paths:
  /status:
    get:
      summary: Check server status
      operationId: checkServerStatus
      description: Check the status of the server.
      responses:
        "200":
          description: Server is running
        "500":
          description: "Internal Server Error"
  /api/v1/bonds/create:
    post:
      summary: Sell bonds
      operationId: createBonds
      description: Create a new bonds. Authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bond"
      responses:
        "201":
          description: Bond Created
        "400":
          description: "Invalid request: client error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "Unauthorized: Authentication token required"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Malformed request: incorrect format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/bonds/user:
    get:
      summary: Get bonds by user
      operationId: getUserBonds
      description: Retrieve bonds posted by a specific user with pagination. Authentication required
      parameters:
        - name: user_id
          in: query
          required: true
          description: ID of the user
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: Page number for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          description: Number of items per page
          schema:
            type: integer
      responses:
        "200":
          description: A list of bonds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bond"
        "400":
          description: "Bad Request: Incorrect query parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "Unauthorized: Authentication token required"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Unprocessable Entity: Invalid user ID format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/bonds/all:
    get:
      summary: Get all bonds
      operationId: getAllBonds
      description: Retrieve all bonds. Authentication required.
      parameters:
        - name: page
          in: query
          required: true
          description: Page number for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          description: Number of items per page
          schema:
            type: integer
      responses:
        "200":
          description: A list of bonds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bond"
        "400":
          description: "Bad Request: Incorrect query parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "Unauthorized: Authentication token required"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Unprocessable Entity: Invalid user ID format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/bonds/buy:
    post:
      summary: Buy a bond
      operationId: buyBond
      description: Purchase a bond by its unique ID. Authentication required.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuyBondRequest"
      responses:
        "201":
          description: Bond successfully purchased
        "400":
          description: "Invalid request: client error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "Unauthorized: Authentication token required"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Not Found: Bond ID or User ID does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Malformed request: incorrect format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/register:
    post:
      summary: Register a new user
      operationId: registerUser
      description: Register a new user with a unique username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User successfully registered
        "400":
          description: "Bad Request: Incorrect parameters or duplicate username"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Unprocessable Entity: Invalid input format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/login:
    post:
      summary: Authenticate a user
      operationId: loginUser
      description: Authenticate a user and return a token if successful.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: "Bad Request: Incorrect parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "Unauthorized: Invalid username or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Not Found: User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Unprocessable Entity: Invalid input format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Bond:
      type: object
      required:
        - id
        - name
        - numberBondsForSale
        - salesPrice
      properties:
        id:
          type: string
          description: Unique bond identifier.
          example: adb6b560-0eef-42bc-9d16-df48f30e89b2
        name:
          type: string
          description: Name of bond type.
          minLength: 3
          maxLength: 40
          example: "Corporate Bond"
        numberBondsForSale:
          type: integer
          description: Number of bonds available for sale.
          minimum: 1
          maximum: 10000
          example: 500
        salesPrice:
          type: number
          format: double
          description: Total sales price of bonds on sale.
          minimum: 0.0000
          maximum: 100000000.0000
          example: 75000.00
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Unique username for the user.
          example: johndoe
        password:
          type: string
          description: Password for the user.
          example: P@ssw0rd
    BuyBondRequest:
      type: object
      required:
        - userId
        - bondId
      properties:
        userId:
          type: string
          description: Unique identifier of the user making the purchase.
          example: 123e4567-e89b-12d3-a456-426614174000
        bondId:
          type: string
          description: Unique identifier of the bond being purchased.
          example: adb6b560-0eef-42bc-9d16-df48f30e89b2
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username of the user.
          example: johndoe
        password:
          type: string
          description: Password of the user.
          example: P@ssw0rd
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: Authentication token.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ErrorResponse:
      type: object
      properties:
        code:
          type: number
          example: 1
        message:
          type: string
          example: "an error occurred related to a bonus"
